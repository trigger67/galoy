type InputError implements Error {
  message: String!
  path: [String]
  code: InputErrorCode!
}

interface Error {
  message: String!
  path: [String]
}

enum InputErrorCode {
  INVALID_INPUT
  VALUE_TOO_SHORT
  VALUE_TOO_LONG
  VALUE_NOT_ALLOWED
}

type PaymentError implements Error {
  message: String!
  path: [String]
  code: PaymentErrorCode!
}

enum PaymentErrorCode {
  ACCOUNT_LOCKED
  LIMIT_EXCEEDED
  INSUFFICENT_BALANCE
  INVOICE_PAID
  NO_LIQUIDITY
  NO_ROUTE
}

type ConsumerAccount implements Account {
  wallets: [Wallet!]!
  csvTransactions(walletIds: [WalletId!]!): String!
}

interface Account {
  wallets: [Wallet!]!
  csvTransactions(walletIds: [WalletId!]!): String!
}

interface Wallet {
  id: ID!
  walletCurrency: WalletCurrency!
  balance: SignedAmount!
  transactions(
    """
    Returns the items in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the first n items from the list.
    """
    first: Int

    """
    Returns the items in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the last n items from the list.
    """
    last: Int
  ): TransactionConnection
}

enum WalletCurrency {
  BTC
}

"""
An amount (of a currency) that can be negative (i.g. in a transaction)
"""
scalar SignedAmount

"""
A connection to a list of items.
"""
type TransactionConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [TransactionEdge]
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
An edge in a connection.
"""
type TransactionEdge {
  """
  The item at the end of the edge
  """
  node: Transaction

  """
  A cursor for use in pagination
  """
  cursor: String!
}

"""
Give details about an individual transaction.
Galoy have a smart routing system which is automatically settling intraledger when both the payer and payee use the same wallet - therefore it's possible the transactions is being initiated onchain or with lightning but settled intraledger.
"""
interface Transaction {
  id: ID!

  """
  From which protocol the payment has been initiated.
  """
  initiationVia: PaymentInitiationMethod!

  """
  To which protocol the payment has settled on.
  """
  settlementVia: SettlementMethod!

  """
  Amount of sats paid by the user.
  """
  settlementAmount: SatAmount!
  settlementFee: SatAmount!

  """
  Price in USDCENT/SATS at time of settlement.
  """
  settlementPrice: Price!
  direction: TxDirection!
  status: TxStatus!
  memo: Memo
  createdAt: Timestamp!
}

enum PaymentInitiationMethod {
  INTRA_LEDGER
  ON_CHAIN
  LIGHTNING
}

enum SettlementMethod {
  INTRA_LEDGER
  ON_CHAIN
  LIGHTNING
}

"""
(Positive) Satoshi amount (i.g. quiz earning)
"""
scalar SatAmount

"""
Price amount expressed in base/offset. To calculate, use: `base / 10^offset`
"""
type Price {
  base: SafeInt!
  offset: Int!
  currencyUnit: ExchangeCurrencyUnit!
  formattedAmount: String!
}

"""
The `SafeInt` scalar type represents non-fractional signed whole numeric values. SafeInt can represent values between -(2^53) + 1 and 2^53 - 1
"""
scalar SafeInt

enum ExchangeCurrencyUnit {
  BTCSAT
  USDCENT
}

enum TxDirection {
  SEND
  RECEIVE
}

enum TxStatus {
  PENDING
  SUCCESS
  FAILURE
}

"""
Text field in a lightning payment transaction
"""
scalar Memo

"""
Timestamp field, serialized as Unix time (the number of seconds since the Unix epoch)
"""
scalar Timestamp

"""
Unique identifier of a user
"""
scalar WalletId

type BTCWallet implements Wallet {
  id: ID!
  walletCurrency: WalletCurrency!
  balance: SignedAmount!
  transactions(
    """
    Returns the items in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the first n items from the list.
    """
    first: Int

    """
    Returns the items in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the last n items from the list.
    """
    last: Int
  ): TransactionConnection
}

type IntraLedgerTransaction implements Transaction {
  id: ID!

  """
  From which protocol the payment has been initiated.
  """
  initiationVia: PaymentInitiationMethod!

  """
  To which protocol the payment has settled on.
  """
  settlementVia: SettlementMethod!

  """
  Amount of sats paid by the user.
  """
  settlementAmount: SatAmount!
  settlementFee: SatAmount!

  """
  Price in USDCENT/SATS at time of settlement.
  """
  settlementPrice: Price!
  direction: TxDirection!
  status: TxStatus!
  memo: Memo
  createdAt: Timestamp!

  """
  Settlement destination: Could be null when originalDestination is OnChain/LN and the payee does not have a username
  """
  otherPartyUsername: Username
}

"""
Unique identifier of a user
"""
scalar Username

type OnChainTransaction implements Transaction {
  id: ID!

  """
  From which protocol the payment has been initiated.
  """
  initiationVia: PaymentInitiationMethod!

  """
  To which protocol the payment has settled on.
  """
  settlementVia: SettlementMethod!

  """
  Amount of sats paid by the user.
  """
  settlementAmount: SatAmount!
  settlementFee: SatAmount!

  """
  Price in USDCENT/SATS at time of settlement.
  """
  settlementPrice: Price!
  direction: TxDirection!
  status: TxStatus!
  memo: Memo
  createdAt: Timestamp!
  addresses: [OnChainAddress!]!
  transactionHash: OnChainTxHash!
}

"""
An address for an on-chain bitcoin destination
"""
scalar OnChainAddress

scalar OnChainTxHash

type LnTransaction implements Transaction {
  id: ID!

  """
  From which protocol the payment has been initiated.
  """
  initiationVia: PaymentInitiationMethod!

  """
  To which protocol the payment has settled on.
  """
  settlementVia: SettlementMethod!

  """
  Amount of sats paid by the user.
  """
  settlementAmount: SatAmount!
  settlementFee: SatAmount!

  """
  Price in USDCENT/SATS at time of settlement.
  """
  settlementPrice: Price!
  direction: TxDirection!
  status: TxStatus!
  memo: Memo
  createdAt: Timestamp!
  paymentHash: PaymentHash!
}

scalar PaymentHash

type Query {
  allLevels: [AccountLevel!]!
  userDetailsByPhone(phone: Phone!): UserDetails!
  userDetailsByUsername(username: Username!): UserDetails!
  transactionById(id: ID!): Transaction
  transactionsByHash(hash: PaymentHash!): [Transaction]
  lightningInvoice(hash: PaymentHash!): LightningInvoice!
  lightningPayment(hash: PaymentHash!): LightningPayment!
}

enum AccountLevel {
  ONE
  TWO
}

type UserDetails {
  id: ID!
  phone: Phone!
  username: Username
  language: Language!
  level: AccountLevel
  status: AccountStatus
  title: String
  coordinates: Coordinates
  createdAt: Timestamp!
}

"""
Phone number which includes country code
"""
scalar Phone

scalar Language

enum AccountStatus {
  LOCKED
  ACTIVE
}

type Coordinates {
  longitude: Float!
  latitude: Float!
}

type LightningInvoice {
  createdAt: Timestamp!
  confirmedAt: Timestamp
  description: String!
  expiresAt: Timestamp
  isSettled: Boolean!
  received: SatAmount!
  request: LnPaymentRequest
  secret: LnPaymentSecret!
}

"""
BOLT11 lightning invoice payment request with the amount included
"""
scalar LnPaymentRequest

scalar LnPaymentSecret

type LightningPayment {
  status: LnPaymentStatus
  roundedUpFee: SatAmount
  createdAt: Timestamp
  confirmedAt: Timestamp
  amount: SatAmount
  secret: LnPaymentSecret
  request: LnPaymentRequest
  destination: LnPubkey
}

enum LnPaymentStatus {
  PENDING
  FAILED
  SETTLED
}

scalar LnPubkey

type Mutation {
  userRequestAuthCode(input: UserRequestAuthCodeInput!): SuccessPayload!
  userLogin(input: UserLoginInput!): AuthTokenPayload!
  userUpdateLevel(input: UserUpdateLevelInput!): UserDetailPayload!
  userUpdateStatus(input: UserUpdateStatusInput!): UserDetailPayload!
  businessUpdateMapInfo(input: BusinessUpdateMapInfoInput!): UserDetailPayload!
}

type SuccessPayload {
  errors: [Error!]!
  success: Boolean
}

input UserRequestAuthCodeInput {
  phone: Phone!
}

type AuthTokenPayload {
  errors: [Error!]!
  authToken: AuthToken
}

"""
An authentication code valid for a single use
"""
scalar AuthToken

input UserLoginInput {
  phone: Phone!
  code: OneTimeAuthCode!
}

"""
An authentication code valid for a single use
"""
scalar OneTimeAuthCode

type UserDetailPayload {
  errors: [Error!]!
  userDetails: UserDetails
}

input UserUpdateLevelInput {
  uid: ID!
  level: AccountLevel!
}

input UserUpdateStatusInput {
  uid: ID!
  status: AccountStatus!
}

input BusinessUpdateMapInfoInput {
  username: Username!
  title: String!
  longitude: Float!
  latitude: Float!
}
