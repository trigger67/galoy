type InputError implements Error {
  message: String!
  path: [String]
  code: InputErrorCode!
}

interface Error {
  message: String!
  path: [String]
}

enum InputErrorCode {
  INVALID_INPUT
  VALUE_TOO_SHORT
  VALUE_TOO_LONG
  VALUE_NOT_ALLOWED
}

type PaymentError implements Error {
  message: String!
  path: [String]
  code: PaymentErrorCode!
}

enum PaymentErrorCode {
  ACCOUNT_LOCKED
  LIMIT_EXCEEDED
  INSUFFICENT_BALANCE
  INVOICE_PAID
  NO_LIQUIDITY
  NO_ROUTE
}

type ConsumerAccount implements Account {
  wallets: [Wallet!]!
  csvTransactions(walletNames: [WalletName!]!): String!
}

interface Account {
  wallets: [Wallet!]!
  csvTransactions(walletNames: [WalletName!]!): String!
}

interface Wallet {
  id: ID!
  walletCurrency: WalletCurrency!
  balance: SignedAmount!
  transactions(
    """
    Returns the items in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the first n items from the list.
    """
    first: Int

    """
    Returns the items in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the last n items from the list.
    """
    last: Int
  ): TransactionConnection
}

enum WalletCurrency {
  BTC
}

"""
An amount (of a currency) that can be negative (i.g. in a transaction)
"""
scalar SignedAmount

"""
A connection to a list of items.
"""
type TransactionConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [TransactionEdge]
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
An edge in a connection.
"""
type TransactionEdge {
  """
  The item at the end of the edge
  """
  node: Transaction

  """
  A cursor for use in pagination
  """
  cursor: String!
}

interface Transaction {
  id: ID!
  walletId: ID!
  initiationVia: PaymentInitiationMethod!
  settlementVia: SettlementMethod!
  settlementAmount: SatAmount!
  settlementFee: SatAmount!
  status: TxStatus

  """
  Settlement destination:
    Could be null when originalDestination is onChain/LN
    and the payeee does not have a WalletName
  """
  recipientId: WalletName
  createdAt: Timestamp!
}

enum PaymentInitiationMethod {
  WALLET_NAME
  ON_CHAIN
  LIGHTNING
}

enum SettlementMethod {
  INTRA_LEDGER
  ON_CHAIN
  LIGHTNING
}

"""
(Positive) Satoshi amount (i.g. quiz earning)
"""
scalar SatAmount

enum TxStatus {
  PENDING
  SUCCESS
  FAILURE
}

"""
Unique identifier of an account wallet
"""
scalar WalletName

"""
Date field, serialized as the number of milliseconds since the Unix Epoch
"""
scalar Timestamp

type BTCWallet implements Wallet {
  id: ID!
  walletCurrency: WalletCurrency!
  balance: SignedAmount!
  transactions(
    """
    Returns the items in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the first n items from the list.
    """
    first: Int

    """
    Returns the items in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the last n items from the list.
    """
    last: Int
  ): TransactionConnection
}

type WalletNameTransaction implements Transaction {
  id: ID!
  walletId: ID!
  initiationVia: PaymentInitiationMethod!
  settlementVia: SettlementMethod!
  settlementAmount: SatAmount!
  settlementFee: SatAmount!
  status: TxStatus
  createdAt: Timestamp!

  """
  Settlement destination:
    Could be null when originalDestination is onChain/LN
    and the payeee does not have a WalletName
  """
  recipientId: WalletName
}

type OnChainTransaction implements Transaction {
  id: ID!
  walletId: ID!
  initiationVia: PaymentInitiationMethod!
  settlementVia: SettlementMethod!
  settlementAmount: SatAmount!
  settlementFee: SatAmount!
  status: TxStatus
  createdAt: Timestamp!
  address: OnChainAddress!

  """
  Settlement destination:
    Could be null when originalDestination is onChain/LN
    and the payeee does not have a WalletName
  """
  recipientId: WalletName
}

"""
An address for an on-chain bitcoin destination
"""
scalar OnChainAddress

type LnTransaction implements Transaction {
  id: ID!
  walletId: ID!
  initiationVia: PaymentInitiationMethod!
  settlementVia: SettlementMethod!
  settlementAmount: SatAmount!
  settlementFee: SatAmount!
  status: TxStatus
  createdAt: Timestamp!
  paymentHash: LnPaymentHash!

  """
  Settlement destination:
    Could be null when originalDestination is onChain/LN
    and the payeee does not have a WalletName
  """
  recipientId: WalletName
}

scalar LnPaymentHash

type Query {
  allLevels: [AccountLevel!]!
  userDetailsByPhone(phone: Phone!): UserDetails!
  userDetailsByWalletName(walletName: WalletName!): UserDetails!
  transactionByHash(hash: String!): TransactionDetails!
}

enum AccountLevel {
  ONE
  TWO
}

type UserDetails {
  id: ID!
  phone: Phone!
  walletName: WalletName
  language: Language!
  level: AccountLevel
  status: AccountStatus
  title: String
  coordinates: Coordinates
  createdAt: Timestamp!
}

"""
Phone number which includes country code
"""
scalar Phone

enum Language {
  EN_US
  ES_SV
}

enum AccountStatus {
  LOCKED
  ACTIVE
}

type Coordinates {
  longitude: Float!
  latitude: Float!
}

type TransactionDetails {
  ledgerTxs: [Transaction]
  lightningPayment: LightningPayment
}

type LightningPayment {
  status: String
  roundedUpFee: SatAmount
  createdAt: Timestamp
  confirmedAt: Timestamp
  amount: SatAmount
  secret: LnPaymentSecret
  request: LnPaymentRequest
  destination: String
}

scalar LnPaymentSecret

"""
BOLT11 lightning invoice payment request with the amount included
"""
scalar LnPaymentRequest

type Mutation {
  userRequestAuthCode(input: UserRequestAuthCodeInput!): SuccessPayload!
  userLogin(input: UserLoginInput!): AuthTokenPayload!
  userUpdateLevel(input: UserUpdateLevelInput!): UserDetailPayload!
  userUpdateStatus(input: UserUpdateStatusInput!): UserDetailPayload!
  businessUpdateMapInfo(input: BusinessUpdateMapInfoInput!): UserDetailPayload!
}

type SuccessPayload {
  errors: [Error!]!
  success: Boolean
}

input UserRequestAuthCodeInput {
  phone: Phone!
}

type AuthTokenPayload {
  errors: [Error!]!
  authToken: AuthToken
}

"""
An authentication code valid for a single use
"""
scalar AuthToken

input UserLoginInput {
  phone: Phone!
  code: OneTimeAuthCode!
}

"""
An authentication code valid for a single use
"""
scalar OneTimeAuthCode

type UserDetailPayload {
  errors: [Error!]!
  userDetails: UserDetails
}

input UserUpdateLevelInput {
  uid: ID!
  level: AccountLevel!
}

input UserUpdateStatusInput {
  uid: ID!
  status: AccountStatus!
}

input BusinessUpdateMapInfoInput {
  walletName: WalletName!
  title: String!
  longitude: Float!
  latitude: Float!
}
