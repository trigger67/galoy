type InputError implements Error {
  message: String!
  path: [String]
  code: InputErrorCode!
}

interface Error {
  message: String!
  path: [String]
}

enum InputErrorCode {
  INVALID_INPUT
  VALUE_TOO_SHORT
  VALUE_TOO_LONG
  VALUE_NOT_ALLOWED
}

type PaymentError implements Error {
  message: String!
  path: [String]
  code: PaymentErrorCode!
}

enum PaymentErrorCode {
  ACCOUNT_LOCKED
  LIMIT_EXCEEDED
  INSUFFICENT_BALANCE
  INVOICE_PAID
  NO_LIQUIDITY
  NO_ROUTE
}

type ConsumerAccount implements Account {
  wallets: [Wallet!]!
  csvTransactions(walletNames: [WalletName!]!): String!
}

interface Account {
  wallets: [Wallet!]!
  csvTransactions(walletNames: [WalletName!]!): String!
}

interface Wallet {
  id: ID!
  walletCurrency: WalletCurrency!
  balance: SignedAmount!
  transactions(
    """
    Returns the items in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the first n items from the list.
    """
    first: Int

    """
    Returns the items in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the last n items from the list.
    """
    last: Int
  ): TransactionConnection
}

enum WalletCurrency {
  BTC
}

"""
An amount (of a currency) that can be negative (i.g. in a transaction)
"""
scalar SignedAmount

"""
A connection to a list of items.
"""
type TransactionConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [TransactionEdge]
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
An edge in a connection.
"""
type TransactionEdge {
  """
  The item at the end of the edge
  """
  node: Transaction

  """
  A cursor for use in pagination
  """
  cursor: String!
}

interface Transaction {
  id: ID!
  walletId: ID!
  initiationVia: PaymentInitiationMethod!
  settlementVia: SettlementMethod!
  settlementAmount: SatAmount!
  settlementFee: SatAmount!
  status: TxStatus

  """
  Settlement destination:
    Could be null when originalDestination is onChain/LN
    and the payeee does not have a WalletName
  """
  recipientId: WalletName
  createdAt: Timestamp!
}

enum PaymentInitiationMethod {
  WALLET_NAME
  ON_CHAIN
  LIGHTNING
}

enum SettlementMethod {
  INTRA_LEDGER
  ON_CHAIN
  LIGHTNING
}

"""
(Positive) Satoshi amount (i.g. quiz earning)
"""
scalar SatAmount

enum TxStatus {
  PENDING
  SUCCESS
  FAILURE
}

"""
Unique identifier of an account wallet
"""
scalar WalletName

"""
Date field, serialized as the number of milliseconds since the Unix Epoch
"""
scalar Timestamp

type BTCWallet implements Wallet {
  id: ID!
  walletCurrency: WalletCurrency!
  balance: SignedAmount!
  transactions(
    """
    Returns the items in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the first n items from the list.
    """
    first: Int

    """
    Returns the items in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the last n items from the list.
    """
    last: Int
  ): TransactionConnection
}

type WalletNameTransaction implements Transaction {
  id: ID!
  walletId: ID!
  initiationVia: PaymentInitiationMethod!
  settlementVia: SettlementMethod!
  settlementAmount: SatAmount!
  settlementFee: SatAmount!
  status: TxStatus
  createdAt: Timestamp!

  """
  Settlement destination:
    Could be null when originalDestination is onChain/LN
    and the payeee does not have a WalletName
  """
  recipientId: WalletName
}

type OnChainTransaction implements Transaction {
  id: ID!
  walletId: ID!
  initiationVia: PaymentInitiationMethod!
  settlementVia: SettlementMethod!
  settlementAmount: SatAmount!
  settlementFee: SatAmount!
  status: TxStatus
  createdAt: Timestamp!
  address: OnChainAddress!

  """
  Settlement destination:
    Could be null when originalDestination is onChain/LN
    and the payeee does not have a WalletName
  """
  recipientId: WalletName
}

"""
An address for an on-chain bitcoin destination
"""
scalar OnChainAddress

type LnTransaction implements Transaction {
  id: ID!
  walletId: ID!
  initiationVia: PaymentInitiationMethod!
  settlementVia: SettlementMethod!
  settlementAmount: SatAmount!
  settlementFee: SatAmount!
  status: TxStatus
  createdAt: Timestamp!
  paymentHash: LnPaymentHash!

  """
  Settlement destination:
    Could be null when originalDestination is onChain/LN
    and the payeee does not have a WalletName
  """
  recipientId: WalletName
}

scalar LnPaymentHash

type Query {
  globals: Globals
  me: User
  walletNameAvailable(walletName: WalletName!): Boolean
  businessMapMarkers: [MapMarker]
  mobileVersions: [MobileVersions]
  quizQuestions: [QuizQuestion]
  btcPriceList(range: PriceGraphRange!): [PricePoint]
  onChainTxFee(
    walletName: WalletName
    address: OnChainAddress!
    amount: SatAmount!
    targetConfirmations: TargetConfirmations = 3
  ): OnChainTxFee!
  accountApiKeys: [AccountApiKeyHashed]
}

type Globals {
  nodesIds: [String!]!
}

type User {
  id: ID!
  phone: Phone!
  language: Language!
  contacts: [WalletContact!]!
  quizQuestions: [UserQuizQuestion!]!
  twoFAEnabled: Boolean
  createdAt: Timestamp!
  defaultAccount: Account!
}

"""
Phone number which includes country code
"""
scalar Phone

enum Language {
  EN_US
  ES_SV
}

type WalletContact {
  walletName: ID!
  alias: ContactAlias
  transactionsCount: Int!
  transactions(
    """
    Returns the items in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the first n items from the list.
    """
    first: Int

    """
    Returns the items in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the last n items from the list.
    """
    last: Int
  ): TransactionConnection
}

"""
An alias name that a user can set for a wallet (with which they have transactions)
"""
scalar ContactAlias

type UserQuizQuestion {
  question: QuizQuestion!
  completed: Boolean!
}

type QuizQuestion {
  id: ID!

  """
  The earn reward in Satoshis for the quiz question
  """
  earnAmount: SatAmount!
}

type MapMarker {
  walletName: WalletName
  mapInfo: MapInfo!
}

type MapInfo {
  title: String!
  coordinates: Coordinates!
}

type Coordinates {
  longitude: Float!
  latitude: Float!
}

type MobileVersions {
  platform: String!
  currentSupported: Int!
  minSupported: Int!
}

type PricePoint {
  """
  Unix timesamp (number of seconds elapsed since January 1, 1970 00:00:00 UTC)
  """
  timestamp: Timestamp!
  price: Price!
}

"""
Price amount expressed in base/offset. To calculate, use: `base / 10^offset`
"""
type Price {
  base: SafeInt!
  offset: Int!
  currencyUnit: ExchangeCurrencyUnit!
  formattedAmount: String!
}

"""
The `SafeInt` scalar type represents non-fractional signed whole numeric values. SafeInt can represent values between -(2^53) + 1 and 2^53 - 1
"""
scalar SafeInt

enum ExchangeCurrencyUnit {
  BTCSAT
  USDCENT
}

"""
The range for the X axis in the BTC price graph
"""
enum PriceGraphRange {
  ONE_DAY
  ONE_WEEK
  ONE_MONTH
  ONE_YEAR
  FIVE_YEARS
}

type OnChainTxFee {
  amount: SatAmount!
  targetConfirmations: TargetConfirmations!
}

"""
(Positive) Number of blocks in which the transaction is expected to be confirmed
"""
scalar TargetConfirmations

type AccountApiKeyHashed {
  label: AccountApiKeyLabel!
  expireAt: Timestamp!
}

"""
Identifier of an account api key
"""
scalar AccountApiKeyLabel

type Mutation {
  userRequestAuthCode(input: UserRequestAuthCodeInput!): SuccessPayload!
  userLogin(input: UserLoginInput!): AuthTokenPayload!
  twoFAGenerate: TwoFAGeneratePayload!
  twoFASave(input: TwoFASaveInput!): SuccessPayload!
  twoFADelete(input: TwoFADeleteInput!): SuccessPayload!
  userQuizQuestionUpdateCompleted(
    input: UserQuizQuestionUpdateCompletedInput!
  ): UserQuizQuestionUpdateCompletedPayload!
  deviceNotificationTokenCreate(
    input: DeviceNotificationTokenCreateInput!
  ): SuccessPayload!
  accountApiKeyCreate(input: AccountApiKeyCreateInput!): AccountApiKeyPayload!
  accountApiKeyDisable(input: AccountApiKeyDisableInput!): SuccessPayload!
  userUpdateLanguage(input: UserUpdateLanguageInput!): UserUpdateLanguagePayload!
  walletContactUpdateAlias(
    input: WalletContactUpdateAliasInput!
  ): WalletContactUpdateAliasPayload!
  lnInvoiceFeeProbe(input: LnInvoiceFeeProbeInput!): SatAmountPayload!
  lnNoAmountInvoiceFeeProbe(input: LnNoAmountInvoiceFeeProbeInput!): SatAmountPayload!
  lnInvoiceCreate(input: LnInvoiceCreateInput!): LnInvoicePayload!
  lnNoAmountInvoiceCreate(input: LnNoAmountInvoiceCreateInput!): LnNoAmountInvoicePayload!
  lnInvoiceCreateOnBehalfOfRecipient(
    input: LnInvoiceCreateOnBehalfOfRecipientInput!
  ): LnInvoicePayload!
  lnNoAmountInvoiceCreateOnBehalfOfRecipient(
    input: LnNoAmountInvoiceCreateOnBehalfOfRecipientInput!
  ): LnNoAmountInvoicePayload!
  lnInvoicePaymentSend(input: LnInvoicePaymentInput!): PaymentSendPayload!
  lnNoAmountInvoicePaymentSend(input: LnNoAmountInvoicePaymentInput!): PaymentSendPayload!
  intraLedgerPaymentSend(input: IntraLedgerPaymentSendInput!): PaymentSendPayload!
  onChainAddressCreate(input: OnChainAddressCreateInput!): OnChainAddressPayload!
  onChainAddressCurrent(input: OnChainAddressCurrentInput!): OnChainAddressPayload!
  onChainPaymentSend(input: OnChainPaymentSendInput!): PaymentSendPayload!
  onChainPaymentSendAll(input: OnChainPaymentSendAllInput!): PaymentSendPayload!
  captchaCreateChallenge: CaptchaCreateChallengePayload!
  captchaRequestAuthCode(input: CaptchaRequestAuthCodeInput!): SuccessPayload!
}

type SuccessPayload {
  errors: [Error!]!
  success: Boolean
}

input UserRequestAuthCodeInput {
  phone: Phone!
}

type AuthTokenPayload {
  errors: [Error!]!
  authToken: AuthToken
}

"""
An authentication code valid for a single use
"""
scalar AuthToken

input UserLoginInput {
  phone: Phone!
  code: OneTimeAuthCode!
}

"""
An authentication code valid for a single use
"""
scalar OneTimeAuthCode

type TwoFAGeneratePayload {
  errors: [Error!]!
  twoFASecret: TwoFASecret
}

type TwoFASecret {
  secret: String!
  uri: String!
}

input TwoFASaveInput {
  secret: String!
  token: String!
}

input TwoFADeleteInput {
  token: String!
}

type UserQuizQuestionUpdateCompletedPayload {
  errors: [Error!]!
  userQuizQuestion: UserQuizQuestion
}

input UserQuizQuestionUpdateCompletedInput {
  id: ID!
}

input DeviceNotificationTokenCreateInput {
  deviceToken: String!
}

type AccountApiKeyPayload {
  errors: [Error!]!
  accountApiKey: AccountApiKey
}

type AccountApiKey {
  label: AccountApiKeyLabel!
  key: String!
  secret: String!
  expireAt: Timestamp!
}

input AccountApiKeyCreateInput {
  label: AccountApiKeyLabel
  expireAt: Timestamp!
}

input AccountApiKeyDisableInput {
  label: AccountApiKeyLabel!
}

type UserUpdateLanguagePayload {
  errors: [Error!]!
  user: UserDetails
}

type UserDetails {
  id: ID!
  phone: Phone!
  language: Language!
  contacts: [WalletContact!]!
  quizQuestions: [UserQuizQuestion!]!
  twoFAEnabled: Boolean
  createdAt: Timestamp!
}

input UserUpdateLanguageInput {
  language: Language!
}

type WalletContactUpdateAliasPayload {
  errors: [Error!]!
  user: UserDetails
}

input WalletContactUpdateAliasInput {
  walletName: WalletName!
  alias: ContactAlias!
}

type SatAmountPayload {
  errors: [Error!]!
  amount: SatAmount
}

input LnInvoiceFeeProbeInput {
  paymentRequest: LnPaymentRequest!
}

"""
BOLT11 lightning invoice payment request with the amount included
"""
scalar LnPaymentRequest

input LnNoAmountInvoiceFeeProbeInput {
  paymentRequest: LnPaymentRequest!
  amount: SatAmount!
}

type LnInvoicePayload {
  errors: [Error!]!
  invoice: LnInvoice
}

type LnInvoice {
  paymentRequest: LnPaymentRequest!
  paymentHash: LnPaymentHash!
  paymentSecret: LnPaymentSecret!
  satoshis: SatAmount
}

scalar LnPaymentSecret

input LnInvoiceCreateInput {
  amount: SatAmount!
  memo: Memo
}

"""
Text field in a lightning payment transaction
"""
scalar Memo

type LnNoAmountInvoicePayload {
  errors: [Error!]!
  invoice: LnNoAmountInvoice
}

type LnNoAmountInvoice {
  paymentRequest: LnPaymentRequest!
  paymentHash: LnPaymentHash!
  paymentSecret: LnPaymentSecret!
}

input LnNoAmountInvoiceCreateInput {
  memo: Memo
}

input LnInvoiceCreateOnBehalfOfRecipientInput {
  recipient: WalletName!
  amount: SatAmount!
  memo: Memo
}

input LnNoAmountInvoiceCreateOnBehalfOfRecipientInput {
  recipient: WalletName!
  memo: Memo
}

type PaymentSendPayload {
  errors: [Error!]!
  status: PaymentSendResult
}

enum PaymentSendResult {
  SUCCESS
  FAILURE
  PENDING
  ALREADY_PAID
}

input LnInvoicePaymentInput {
  paymentRequest: LnPaymentRequest!
  memo: Memo
}

input LnNoAmountInvoicePaymentInput {
  paymentRequest: LnPaymentRequest!
  amount: SatAmount!
  memo: Memo
}

input IntraLedgerPaymentSendInput {
  recipient: WalletName!
  amount: SatAmount!
  memo: Memo
}

type OnChainAddressPayload {
  errors: [Error!]!
  address: OnChainAddress
}

input OnChainAddressCreateInput {
  walletName: WalletName
}

input OnChainAddressCurrentInput {
  walletName: WalletName
}

input OnChainPaymentSendInput {
  address: OnChainAddress!
  amount: SatAmount!
  memo: Memo
}

input OnChainPaymentSendAllInput {
  address: OnChainAddress!
  memo: Memo
}

type CaptchaCreateChallengePayload {
  errors: [Error!]!
  result: CaptchaCreateChallengeResult
}

type CaptchaCreateChallengeResult {
  id: String!
  challengeCode: String!
  newCaptcha: Boolean!
  failbackMode: Boolean!
}

input CaptchaRequestAuthCodeInput {
  phone: Phone!
  challengeCode: String!
  validationCode: String!
  secCode: String!
}

type Subscription {
  price(input: PriceInput!): PricePayload!
  lnInvoicePaymentStatus(
    input: LnInvoicePaymentStatusInput!
  ): LnInvoicePaymentStatusPayload!
}

type PricePayload {
  errors: [Error!]!
  price: Price
}

input PriceInput {
  amount: SatAmount!
  amountCurrencyUnit: ExchangeCurrencyUnit!
  priceCurrencyUnit: ExchangeCurrencyUnit!
}

type LnInvoicePaymentStatusPayload {
  errors: [Error!]!
  status: InvoicePaymentStatus
}

enum InvoicePaymentStatus {
  PENDING
  PAID
}

input LnInvoicePaymentStatusInput {
  paymentRequest: LnPaymentRequest!
}
